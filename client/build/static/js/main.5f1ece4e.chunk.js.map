{"version":3,"sources":["components/calendar.js","App.js","serviceWorker.js","index.js"],"names":["Calendar","state","events","currentMonth","Date","selectedDate","onDateClick","day","setState","nextMonth","dateFns","addMonths","prevMonth","subMonths","className","onClick","this","format","days","startDate","startOfWeek","i","push","key","addDays","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","eventList","rows","formattedDate","cloneDay","daysEvents","filter","eventOne","isSameMonth","isSameDay","parse","map","today","id","name","renderHeader","renderDays","renderCells","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAoJeA,G,kNA7IbC,MAAQ,CACFC,SACAC,aAAc,IAAIC,KAClBC,aAAc,IAAID,M,EAyGxBE,YAAc,SAAAC,GAEZ,EAAKC,SAAS,CACVH,aAAcE,K,EAOpBE,UAAY,WACV,EAAKD,SAAS,CACVL,aAAcO,IAAQC,UAAU,EAAKV,MAAME,aAAc,M,EAI/DS,UAAY,WACV,EAAKJ,SAAS,CACVL,aAAcO,IAAQG,UAAU,EAAKZ,MAAME,aAAc,M,8EApH7D,OACI,yBAAKW,UAAU,0BACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,OAAOC,QAASC,KAAKJ,WAApC,iBAIF,yBAAKE,UAAU,kBACb,8BACGJ,IAAQO,OAAOD,KAAKf,MAAME,aAXlB,eAcb,yBAAKW,UAAU,cAAcC,QAASC,KAAKP,WACzC,yBAAKK,UAAU,QAAf,qB,mCAWR,IAHA,IACMI,EAAO,GACTC,EAAYT,IAAQU,YAAYJ,KAAKf,MAAME,cACtCkB,EAAI,EAAGA,EAAI,EAAGA,IACrBH,EAAKI,KACH,yBAAKR,UAAU,iBAAiBS,IAAKF,GAClCX,IAAQO,OAAOP,IAAQc,QAAQL,EAAWE,GAN9B,UAUnB,OAAO,yBAAKP,UAAU,YAAYI,K,oCAsBlC,IAlBa,IAAD,SAC2BF,KAAKf,MAApCE,EADI,EACJA,aAAcE,EADV,EACUA,aAChBoB,EAAaf,IAAQgB,aAAavB,GAClCwB,EAAWjB,IAAQkB,WAAWH,GAC9BN,EAAYT,IAAQU,YAAYK,GAChCI,EAAUnB,IAAQoB,UAAUH,GAE5BI,EAAYf,KAAKf,MAAMC,OAKvB8B,EAAO,GACTd,EAAO,GACPX,EAAMY,EACNc,EAAgB,GAGb1B,GAAOsB,GAAS,CACvB,IADwB,IAAD,WACdR,GACLY,EAAgBvB,IAAQO,OAAOV,EAThB,KAWf,IAAM2B,EAAW3B,EACX4B,EAAaJ,EAAUK,OAAO,SAACC,GAAD,OAAcA,EAASlB,YAAcT,IAAQO,OAAOiB,EAAU,gBAGlGhB,EAAKI,KACL,yBACIR,UAAS,mBACRJ,IAAQ4B,YAAY/B,EAAKkB,GAEpBf,IAAQ6B,UAAUhC,EAAKF,GAAgB,WAAa,GADpD,YAGNkB,IAAKhB,EACLQ,QAAS,kBAAM,EAAKT,YAAYI,IAAQ8B,MAAMN,MAG/C,yBAAKpB,UAAY,YACXqB,EAAWM,IAAI,SAAAC,GAAK,OACjB,uBAAG5B,UAAY,WAAW6B,GAAMD,EAAMC,GAAIpB,IAAOmB,EAAMnB,KAAMmB,EAAME,SAK3E,0BAAM9B,UAAU,UAAUmB,GAC1B,0BAAMnB,UAAU,MAAMmB,KAI1B1B,EAAMG,IAAQc,QAAQjB,EAAK,IA9BtBc,EAAI,EAAGA,EAAI,EAAGA,IAAM,IAgC7BW,EAAKV,KACD,yBAAKR,UAAU,MAAMS,IAAKhB,GACzBW,IAGLA,EAAO,GAGP,OAAO,yBAAKJ,UAAU,QAAQkB,K,+BA2B9B,OACI,yBAAKlB,UAAU,YACdE,KAAK6B,eACL7B,KAAK8B,aACL9B,KAAK+B,mB,GAxISC,IAAMC,YCoBdC,G,wLAlBX,OACE,yBAAKpC,UAAU,OACb,gCACE,yBAAK6B,GAAG,QACN,0BAAM7B,UAAU,QAAhB,cACA,sCACO,0CAIX,8BACE,kBAAC,EAAD,Y,GAbQkC,IAAMC,YCMJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.5f1ece4e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport dateFns, { endOfToday } from \"date-fns\";\r\n\r\nimport events from \"../events.json\";\r\nimport \"./calendar.css\";\r\n\r\nclass Calendar extends React.Component {\r\n  state = {\r\n        events,\r\n        currentMonth: new Date(),\r\n        selectedDate: new Date(),\r\n        \r\n  };\r\n\r\n  renderHeader() {\r\n    const dateFormat = \"MMMM YYYY\";\r\n    \r\n    return (\r\n        <div className=\"header row flex-middle\">\r\n          <div className=\"col col-start\">\r\n            <div className=\"icon\" onClick={this.prevMonth}>\r\n              chevron_left\r\n            </div>\r\n          </div>\r\n          <div className=\"col col-center\">\r\n            <span>\r\n              {dateFns.format(this.state.currentMonth, dateFormat)}\r\n            </span>\r\n          </div>\r\n          <div className=\"col col-end\" onClick={this.nextMonth}>\r\n            <div className=\"icon\">chevron_right</div>\r\n          </div>\r\n        </div>\r\n      );\r\n  }\r\n\r\n\r\n  renderDays() {\r\n    const dateFormat = \"dddd\";\r\n    const days = [];\r\n    let startDate = dateFns.startOfWeek(this.state.currentMonth);\r\n    for (let i = 0; i < 7; i++) {\r\n      days.push(\r\n        <div className=\"col col-center\" key={i}>\r\n          {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\r\n        </div>\r\n      );\r\n    }\r\n    return <div className=\"days row\">{days}</div>;\r\n  }\r\n\r\n\r\n  renderCells() {\r\n    const { currentMonth, selectedDate } = this.state;\r\n    const monthStart = dateFns.startOfMonth(currentMonth);\r\n    const monthEnd = dateFns.endOfMonth(monthStart);\r\n    const startDate = dateFns.startOfWeek(monthStart);\r\n    const endDate = dateFns.endOfWeek(monthEnd);\r\n\r\n    const eventList = this.state.events;\r\n\r\n    \r\n\r\n    const dateFormat = \"D\";\r\n    const rows = [];\r\n    let days = [];\r\n    let day = startDate;\r\n    let formattedDate = \"\";\r\n\r\n\r\n    while (day <= endDate) {\r\n    for (let i = 0; i < 7; i++) {\r\n        formattedDate = dateFns.format(day, dateFormat);\r\n        \r\n        const cloneDay = day;\r\n        const daysEvents = eventList.filter((eventOne) => eventOne.startDate === dateFns.format(cloneDay, \"MM-DD-YYYY\"));\r\n        \r\n\r\n        days.push(\r\n        <div\r\n            className={`col cell ${\r\n            !dateFns.isSameMonth(day, monthStart)\r\n                ? \"disabled\"\r\n                : dateFns.isSameDay(day, selectedDate) ? \"selected\" : \"\"\r\n            }`}\r\n            key={day}\r\n            onClick={() => this.onDateClick(dateFns.parse(cloneDay))}\r\n        >\r\n           \r\n           <div className = \"eventDiv\">\r\n                {daysEvents.map(today => (\r\n                    <p className = \"eventTag\" id = {today.id} key = {today.key}>{today.name}</p>\r\n                ))}\r\n           </div>\r\n           \r\n            \r\n            <span className=\"number\">{formattedDate}</span>            \r\n            <span className=\"bg\">{formattedDate}</span>\r\n           \r\n        </div>\r\n        );\r\n        day = dateFns.addDays(day, 1);\r\n    }\r\n    rows.push(\r\n        <div className=\"row\" key={day}>\r\n        {days}\r\n        </div>\r\n    );\r\n    days = [];\r\n    }\r\n\r\n    return <div className=\"body\">{rows}</div>;\r\n  }\r\n\r\n\r\n  onDateClick = day => {\r\n\r\n    this.setState({\r\n        selectedDate: day\r\n      });\r\n    //   console.log(this.state.selectedDate);\r\n  }\r\n\r\n\r\n\r\n  nextMonth = () => {\r\n    this.setState({\r\n        currentMonth: dateFns.addMonths(this.state.currentMonth, 1)\r\n      });\r\n  }\r\n\r\n  prevMonth = () => {\r\n    this.setState({\r\n        currentMonth: dateFns.subMonths(this.state.currentMonth, 1)\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"calendar\">\r\n        {this.renderHeader()}\r\n        {this.renderDays()}\r\n        {this.renderCells()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calendar;","import React from \"react\";\n\nimport Calendar from \"./components/calendar.js\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div id=\"logo\">\n            <span className=\"icon\">date_range</span>\n            <span>\n              react<b>calendar</b>\n            </span>\n          </div>\n        </header>\n        <main>\n          <Calendar />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}